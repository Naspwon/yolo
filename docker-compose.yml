version: "3.8"

#specify the services to run
services:

  #Builds the frontend Docker image and creates the frontend microservice
  yolo-frontend:
    image: missnayomie/yolo-client:v1.0.0
    build: 
      context: ./client
      dockerfile: Dockerfile
    container_name: yolo-client
    stdin_open: true
    tty: true
    ports:
      - "3000:3000"
    depends_on: 
      - yolo-backend
    networks:
      - mynetwork
    volumes:
      - ./client:/home/vagrant/YoloApp/client

  #Builds the backend Docker image and creates the backend microservice
  yolo-backend:
    image: missnayomie/yolo-backend:v1.0.0
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: yolo-backend
    stdin_open: true
    tty: true
    restart: always
    ports:
      - "5000:5000"
    depends_on: 
      - mongodb
      # mongodb:
      #   condition: service_healthy
    networks:
      - mynetwork
    volumes:
      - ./backend:/home/vagrant/YoloApp/backend

  #Creates the database microservice
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    volumes:
      - type: volume
        source: mongodb_data
        target: /data/db
    # healthcheck:
    #   test: ["CMD", "mongo", "--eval", "db.runCommand({ ping: 1 })"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 5

#Creates the network infrastructure necessary for the containers to communicate with each other
networks:
  mynetwork:
    name: mynetwork
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/16 
          ip_range: 172.20.0.0/16 

#Creates a Docker volume that persists all the data stored in the database
volumes:
  mongodb_data:
    driver: local